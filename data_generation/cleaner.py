# -*- coding: utf-8 -*-
"""
Created on Fri Jan 24 19:46:57 2020

@author: Tim-Laptop

This file is for cleaning the raw data generated by the trackmouse.py record()
function, the word 'batch' when mentioned in the comments in this file means
all of the data entries correspoding to one move event: ie movement between two
mouse clicks
"""

import csv

# global constants
SOURCE_CSV = "../data/recorded_cursor_data.csv"
DEST_CSV = "../data/cleaned_cursor_data.csv"
BUFFER_SIZE = 4096

class Cleaner:
    
    def __init__(self):
        self.current_line = 0
        self.current_batch_num = 1
        self.last_seek_pos = 0
        
    def clean(self):
        for n in range(self.n_final//.008):
            
        
    
    def read_next_block(self):
        ''' open the csv file, read in all the data entries for one movement,
        all the coords between two click events, and close the file when you
        reach the next batch ie movement between click events'''
        batch_data = []
        with open(SOURCE_CSV, 'r', BUFFER_SIZE) as f:
            f.seek(self.last_seek_pos)
            while self.get_batch_num(f) == self.current_batch_num:
                batch_data.append([int(i) if i.isdigit() else i for i in
                                    f.readline().rstrip('\n').split(',')])
                for entry in batch_data:
                    print(entry)
                self.current_batch_num += 1
                self.last_seek_pos = f.tell()
        return batch_data
                
    
    def write_next_block(self, clean_data):
        ''' append the cleaned data to a cleaned_data csv file, one batch at
        a time'''
        with open(DEST_CSV, 'a', BUFFER_SIZE) as f:
            writer = csv.writer(f)
            writer.writerows(clean_data)
            
    
    def get_batch_num(self, file, seek_pos):
        ''' find the current data batch based on seek location in a file '''
        file.seek(seek_pos)
        this_row = csv.reader(file).__next__()
        file.seek(seek_pos)
        return this_row[0]
        
    def get_batch_count(self, file):
        ''' find the total number of batches in the source csv file '''
        return reversed(list(csv.reader(file)))[0][0]
        '''
        except TypeError:
            print('type error')
            for letter in file.readline():
                if n := letter.isdigit():
                    return int(n)
            return None
        except IndexError:
            print('index error, [0][0] does not exist :(')
        '''
        
    @property
    def n_final(self):
        return reversed(list(csv.reader(f)))[0][3]
        
    '''
    def get_line_offsets(self):
        with open(SOURCE_CSV, 'rb', BUFFER_SIZE) as file:
            line_offsets = []
            offset = 0
            for line in file:
                line_offsets.append(offset)
                offset += len(line)
        return line_offsets '''
    
c = Cleaner()
c.clean()

        